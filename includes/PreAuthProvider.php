<?php

namespace MediaWiki\Extension\RphDiscordOauth;

use MediaWiki\Auth\AbstractPreAuthenticationProvider;
use MediaWiki\Auth\AuthenticationResponse;
use MediaWiki\MediaWikiServices;

class PreAuthProvider extends AbstractPreAuthenticationProvider {
    public function testForAccountCreation($user, $creator, array $reqs)
    {
        global $wgRequest;
        if ($wgRequest->getSessionData('discord_validated') !== "YES") {
            return \StatusValue::newFatal("Please log in with Discord first.");
        }
        return parent::testForAccountCreation($user, $creator, $reqs); // TODO: Change the autogenerated stub
    }

    public function postAccountCreation($user, $creator, AuthenticationResponse $response)
    {
        global $wgRequest;
        $lb = MediaWikiServices::getInstance()->getDBLoadBalancer();
        $dbr = $lb->getConnectionRef( DB_PRIMARY );
        $dbr->insert('discord_oauth2_users', [
            'id' => $user->mId,
            'discordId' => $wgRequest->getSessionData('discord_user_id')
        ]);
        parent::postAccountCreation($user, $creator, $response); // TODO: Change the autogenerated stub
    }

    public function testUserForCreation($user, $autocreate, array $options = [])
    {
        global $wgRequest;
        if ($wgRequest->getSessionData('discord_validated') !== "YES") {
            return \StatusValue::newFatal("Please log in with Discord first.");
        }
        return parent::testUserForCreation($user, $autocreate, $options); // TODO: Change the autogenerated stub
    }
}